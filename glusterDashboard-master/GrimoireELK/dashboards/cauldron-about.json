{"index_patterns": [], "searches": [], "dashboard": {"id": "About", "value": {"description": "", "title": "About", "version": 1, "hits": 0, "uiStateJSON": "{\"P-2\":{\"title\":\"Panels\"},\"P-3\":{\"title\":\"Working with the dashboard\"},\"P-4\":{\"title\":\"Acknowledgments\"}}", "kibanaSavedObjectMeta": {"searchSourceJSON": "{\"filter\":[{\"query\":{\"query_string\":{\"analyze_wildcard\":true,\"query\":\"*\"}}}]}"}, "panelsJSON": "[{\"col\":1,\"id\":\"About\",\"panelIndex\":1,\"row\":1,\"size_x\":6,\"size_y\":4,\"type\":\"visualization\"},{\"col\":7,\"id\":\"About-Panels\",\"panelIndex\":2,\"row\":1,\"size_x\":6,\"size_y\":4,\"type\":\"visualization\",\"title\":\"Panels\"},{\"col\":1,\"id\":\"About-Working\",\"panelIndex\":3,\"row\":5,\"size_x\":6,\"size_y\":3,\"type\":\"visualization\",\"title\":\"Working with the dashboard\"},{\"id\":\"About-Acks\",\"type\":\"visualization\",\"panelIndex\":4,\"size_x\":6,\"size_y\":3,\"col\":7,\"row\":5,\"title\":\"Acknowledgments\"}]", "timeRestore": false, "optionsJSON": "{\"darkTheme\":false}"}}, "visualizations": [{"id": "About", "value": {"description": "", "title": "About", "version": 1, "uiStateJSON": "{}", "kibanaSavedObjectMeta": {"searchSourceJSON": "{\"query\":{\"query_string\":{\"analyze_wildcard\":true,\"query\":\"*\"}},\"filter\":[]}"}, "visState": "{\"title\":\"About\",\"type\":\"markdown\",\"params\":{\"markdown\":\"# About the dashboards in Cauldron.io\\n\\nDashboards in [Cauldron.io](http://cauldron.io) are based on information retrieved for a GitHub owner, as specified by our users. A GitHub owner may be a person or an organization. In any case, once a user specifies a GitHub owner, Cauldron.io retrieves data from the 10 repositories of that owner with most recent activity. For each of the repositories, we retrieve information about git commits, issues and pull requests in it.\\n\\nAll the software used to retrieve, store, analyze and visualize data from repositories is done with free, open source software. The key part of it is [GrimoireLab](http://grimoirelab.github.io), the software development analytics toolset. Although [Bitergia](http://bitergia.com) is the lead developer of GrimoireLab, we intend the project to work as a community, and your contributions are welcome.\\n\\nOther key pieces used to produce dashboards are Python (most of the retrieval and analytics software we use is written in Python), ElasticSearch (for data storage) and Kibana (for visualization we use Kibitter, our own fork of Kibana, which we intend to contribute back upstream).\\n\\nWe take your privacy seriously. All the information provided in the dashboards is based on publicly available data. We have done our best, however, to avoid publishing privacy-related information, such as email addresses, even if publicly available. Please, contact us if you spot some data that could be subject to privacy issues. For more details on the matter, please consult our Privacy Policy.\"},\"aggs\":[],\"listeners\":{}}"}}, {"id": "About-Panels", "value": {"description": "", "title": "About Panels", "version": 1, "uiStateJSON": "{}", "kibanaSavedObjectMeta": {"searchSourceJSON": "{\"query\":{\"query_string\":{\"analyze_wildcard\":true,\"query\":\"*\"}},\"filter\":[]}"}, "visState": "{\"title\":\"About Panels\",\"type\":\"markdown\",\"params\":{\"markdown\":\"# The panels in the dashboards\\n\\nThe dashboards in [Caludron.io](http://cauldron.io) visualize data about GitHub repositories organized in several panels, described below.\\n\\n## Overview\\n\\nThe Overview panel shows a summary of the GitHub repositories analyzed. Most of the visualizations found in it can be explored in more detail in the panels corresponding to the different analysis: Git, Issues, and Pull requests.\\n\\n## Git\\n\\nThe Git panel shows information about commits in git repositories. For each commit, git stores metainformation about who authored the commit (author), and when, and about who included the commit in the repository (committer), and when. Due to the way GitHub (and in particular GitHub pull requests) work, the information about the committer is now always accurate.\\n\\nEach author and committer in git are usually identified by a name and an email address. We use the information in the email addresses to find \\\"domains\\\".\\n\\nEach time (author time, committer time) is expressed usually in the time zone of the computer where the person performed the action (creation of the commit, or merging of it in the repository). We display that time zone information.\\n\\n## Issues\\n\\nThe Issues panel shows information about issues (excluding pull requests, which in GitHub are very similar to issues) in the analyzed repositories.\\n\\nEach issue is created by a certain person, may be assigned to some other, and may be closed by some other. For each of these actions (creation, assignment, closing), the GitHub API provides a date for each issue. We use that information for tracking evolution of issues over time according to these different dates.\\n\\nOne of the key parameters when tracking issues are their time open. For closed issues, time open is really time-to-close, the time from the moment they were created to the moment they were closed. For issues that are still open, time open is the time since creation to the moment when the analysis was performed.\\n\\nThis way, to learn about the time open of currently open issues, the dashboard can be configured to show only open tickets.\\n\\nWhen showing aggregate time open and similar parameters, usually the mean is not a good metric, because the values are very skewed (most of them are relatively short, but a few can be very large). Therefore, in most visualizations we offer medians (maximum time for 50% of the shortest periods), or percentiles (for example, maximum time for 80% or 95% of the shortest periods). This can be interpreted in the following way as well: it t is the time for the 80% percentile, there is 20% of issues with longer time than t.\\n\\nThe GitHub API provides, for each user, some geographical information, if the user registered it. That information includes its location, both as a name (eg, San Francisco) and as long/lat coordinates. We use that information to produce the tables for localization and the maps. Therefore, those tables and maps include only information about users who registered their data with GitHub, and not all users involved in the issue tracking process. The same can be said for organizations: GitHub users may register, as a string, the organization to which they belong. For this reason, a certain organization may appear with different spellings, and the information is only as accurate as users are registering and updating it.\\n\\n## Pull requests\\n\\nThe Pull requests panel shows information about pull requests in the analyzed repositories. In GitHub, pull requests are a kind of specialized issue. Therefore, most of the visualizations we provide for them are quite similar to those we provide for issues, and the same explanations apply.\"},\"aggs\":[],\"listeners\":{}}"}}, {"id": "About-Working", "value": {"description": "", "title": "About Working", "version": 1, "uiStateJSON": "{}", "kibanaSavedObjectMeta": {"searchSourceJSON": "{\"query\":{\"query_string\":{\"analyze_wildcard\":true,\"query\":\"*\"}},\"filter\":[]}"}, "visState": "{\"title\":\"About Working\",\"type\":\"markdown\",\"params\":{\"markdown\":\"# Working with the dashboard\\n\\nDashboards in [Cauldron.io](http://cauldron.io) show information in several panels. Each of these panels include several visualizations. Many elements in the visualizations are actionable. When the user interacts with them, the information in the whole panel (and in some cases in the whole dashboard) is reconfigured, usually by filtering in or out some data.\\n\\n## Date filter\\n\\nOn the top right corner you can find the date filter. It allows you to select the time period which is considered when visualizing the data. Only items in that time period will be shown. So, for example, the total count of commits, or the evolution of issues created over time, correspond only to commits authored (or committed, if specified), or to issues created (or closed, if specified) during that period.\\n\\nDate filters can be defined as well by clicking on bars on time-based charts, or by selecting (clicking and dragging) on a group of them.\\n\\n## Data filters\\n\\nClicking on almost any cell in tables, sector in pies, or bar in bar charts causes a filter to be applied. Filters appear as green boxes on the top left of the dashboard (right below the panels menu). For example, clicking on a developer name causes a filter with that name, which will cause the panel to show only activity of that developer.\\n\\nFilters can be removed (click on the trash icon in the filter itself), negated (click on the minus sign), or disabled (click on the left box within the filter). Filters can also be made \\\"sticky\\\", which means they will be applied all over the dashboard, even if moving to a new panel.\\n\\n## Sharing\\n\\nDashboards, once configured with date filters and data filters, can be shared and bookmarked. Anyone using the shared link or the bookmark will have access to exactly the same view (filters included) that was shown when the link or bookmark was created. For producing the link to share or bookmark, click on the \\\"share\\\" icon, on the top right of the dashboard.\\n\\n\\n## Kibana\\n\\nThe dashboards in Cauldron.io are customized Kibana dashboards. Therefore, some of the information about how to work with Kibana dashboards may be useful. See for example the [Kibana tutorial on dashboards](https://www.elastic.co/guide/en/kibana/4.5/dashboard.html).\"},\"aggs\":[],\"listeners\":{}}"}}, {"id": "About-Acks", "value": {"description": "", "title": "About Acks", "version": 1, "uiStateJSON": "{}", "kibanaSavedObjectMeta": {"searchSourceJSON": "{\"query\":{\"query_string\":{\"query\":\"*\",\"analyze_wildcard\":true}},\"filter\":[]}"}, "visState": "{\"title\":\"New Visualization\",\"type\":\"markdown\",\"params\":{\"markdown\":\"# Acknowledgments\\n\\nThanks to all free, open source software developers, who have produced all the software that can be analyzed with the Cauldron.\\n\\nIn particular, thanks to all of them (ranking in the tens of thoudands) who have contributed to the pieces of software who make possible the Cauldron itself.\"},\"aggs\":[],\"listeners\":{}}"}}]}